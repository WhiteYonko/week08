name: Frontend CD

on:
  workflow_dispatch:

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    env:
      # From repo Settings → Actions → Variables
      AKS_RG:   ${{ vars.AKS_RG }}
      AKS_NAME: ${{ vars.AKS_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context (AKS)
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name:  ${{ env.AKS_NAME }}

      - name: Verify k8s access
        run: kubectl get nodes

      # Apply only the frontend (assumes image: <your-acr>.azurecr.io/frontend:latest is already set)
      - name: Deploy frontend
        run: kubectl apply -f k8s/frontend.yaml

      # Wait for the frontend deployment to become available.
      # We try to detect the deployment name automatically (matches *front*).
      - name: Wait for frontend rollout
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_NAME="$(kubectl get deploy -o name | grep -i 'deploy/front' | head -n 1 || true)"
          if [[ -z "$DEPLOY_NAME" ]]; then
            DEPLOY_NAME="deploy/$(kubectl get deploy -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | grep -i 'front' | head -n 1)"
          fi
          if [[ -z "$DEPLOY_NAME" || "$DEPLOY_NAME" == "deploy/" ]]; then
            echo "Could not find a frontend deployment (name containing 'front')."
            kubectl get deploy -o wide
            exit 1
          fi
          echo "Waiting for rollout of: $DEPLOY_NAME"
          kubectl rollout status "$DEPLOY_NAME" --timeout=180s

      - name: Show services & capture frontend EXTERNAL-IP
        id: svc
        shell: bash
        run: |
          set -euo pipefail
          kubectl get svc -o wide
          SVC_NAME="$(kubectl get svc -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | grep -i 'front' | head -n 1 || true)"
          if [[ -z "$SVC_NAME" ]]; then
            echo "Could not find a frontend Service (name containing 'front')."
            exit 1
          fi
          echo "Detected frontend service: $SVC_NAME"
          FRONTEND_IP="$(kubectl get svc "$SVC_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
          echo "FRONTEND_EXTERNAL_IP=$FRONTEND_IP" >> "$GITHUB_OUTPUT"
          echo "Frontend EXTERNAL-IP: $FRONTEND_IP"

      - name: Logout
        if: always()
        run: az logout
